{"cells":[{"cell_type":"markdown","metadata":{},"source":["# **Importing Library**"]},{"cell_type":"code","execution_count":4,"metadata":{"execution":{"iopub.execute_input":"2024-05-16T10:09:41.372403Z","iopub.status.busy":"2024-05-16T10:09:41.371631Z","iopub.status.idle":"2024-05-16T10:09:41.381758Z","shell.execute_reply":"2024-05-16T10:09:41.380652Z","shell.execute_reply.started":"2024-05-16T10:09:41.372365Z"},"trusted":true},"outputs":[],"source":["import pandas as pd\n","#math operations\n","import numpy as np\n","#machine learning\n","import cv2                     \n","import os                  \n","from random import shuffle\n","from tqdm import tqdm  \n","import random\n","#for opening and loading image\n","from PIL import Image\n","#for preprocessing\n","from tensorflow.keras.preprocessing import image\n","import matplotlib.pyplot as plt\n","#Doing One hot encoding as classifier has multiple classes\n","from tensorflow.keras.utils import to_categorical\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Conv2D,MaxPooling2D,Dense,Flatten,Dropout  \n","from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\n","from random import shuffle\n","#For augmentation\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","#MobileNetV2 model\n","from tensorflow.keras.applications.mobilenet_v2 import MobileNetV2\n","from tensorflow.keras import Model, layers\n","from numpy import loadtxt\n","\n","import itertools\n","from sklearn.metrics import confusion_matrix,classification_report\n","\n","from tensorflow.keras.applications.imagenet_utils import preprocess_input, decode_predictions\n","from tensorflow.keras.models import load_model\n","from tensorflow.keras.preprocessing import image"]},{"cell_type":"markdown","metadata":{},"source":["# **Importing Train Dataset**"]},{"cell_type":"code","execution_count":42,"metadata":{"execution":{"iopub.execute_input":"2024-05-16T11:04:55.832558Z","iopub.status.busy":"2024-05-16T11:04:55.831847Z","iopub.status.idle":"2024-05-16T11:04:56.746866Z","shell.execute_reply":"2024-05-16T11:04:56.745783Z","shell.execute_reply.started":"2024-05-16T11:04:55.832524Z"},"trusted":true},"outputs":[],"source":["import numpy as np\n","\n","feats_train = np.load('/kaggle/input/5-calss-skin-cancer/feats_train.npy')\n","labels_train = np.load('/kaggle/input/5-calss-skin-cancer/labels_train.npy')\n"]},{"cell_type":"code","execution_count":43,"metadata":{"execution":{"iopub.execute_input":"2024-05-16T11:05:00.091073Z","iopub.status.busy":"2024-05-16T11:05:00.090328Z","iopub.status.idle":"2024-05-16T11:05:00.096420Z","shell.execute_reply":"2024-05-16T11:05:00.095195Z","shell.execute_reply.started":"2024-05-16T11:05:00.091034Z"},"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["(15889, 224, 224, 3)\n","(15889,)\n"]}],"source":["# Check shapes of the test features and labels\n","print(feats_train.shape)\n","print(labels_train.shape)"]},{"cell_type":"code","execution_count":6,"metadata":{"execution":{"iopub.execute_input":"2024-05-16T10:09:49.135527Z","iopub.status.busy":"2024-05-16T10:09:49.135073Z","iopub.status.idle":"2024-05-16T10:09:49.143587Z","shell.execute_reply":"2024-05-16T10:09:49.142435Z","shell.execute_reply.started":"2024-05-16T10:09:49.135493Z"},"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["15889\n","5\n"]}],"source":["num_classes=len(np.unique(labels_train))\n","len_data=len(feats_train)\n","print(len_data)\n","print(num_classes)"]},{"cell_type":"markdown","metadata":{},"source":["# **One Hot Encoding**"]},{"cell_type":"code","execution_count":7,"metadata":{"execution":{"iopub.execute_input":"2024-05-16T10:09:51.826649Z","iopub.status.busy":"2024-05-16T10:09:51.826228Z","iopub.status.idle":"2024-05-16T10:09:51.833044Z","shell.execute_reply":"2024-05-16T10:09:51.831873Z","shell.execute_reply.started":"2024-05-16T10:09:51.826620Z"},"trusted":true},"outputs":[],"source":["from tensorflow.keras.utils import to_categorical\n","\n","# Assuming labels_train are integer-encoded\n","num_classes = 5  # Number of classes in your dataset\n","labels_train_one_hot = to_categorical(labels_train, num_classes=num_classes)\n"]},{"cell_type":"markdown","metadata":{},"source":["# **Train Test Split**"]},{"cell_type":"code","execution_count":8,"metadata":{"execution":{"iopub.execute_input":"2024-05-16T10:09:54.216330Z","iopub.status.busy":"2024-05-16T10:09:54.215507Z","iopub.status.idle":"2024-05-16T10:09:54.930955Z","shell.execute_reply":"2024-05-16T10:09:54.929795Z","shell.execute_reply.started":"2024-05-16T10:09:54.216295Z"},"trusted":true},"outputs":[],"source":["from sklearn.model_selection import train_test_split\n","\n","X_train, X_val, y_train, y_val = train_test_split(feats_train, labels_train_one_hot, test_size=0.2, random_state=42)\n"]},{"cell_type":"markdown","metadata":{},"source":["# **Prepare the Data Generators**"]},{"cell_type":"code","execution_count":9,"metadata":{"execution":{"iopub.execute_input":"2024-05-16T10:09:56.377040Z","iopub.status.busy":"2024-05-16T10:09:56.376631Z","iopub.status.idle":"2024-05-16T10:10:02.575888Z","shell.execute_reply":"2024-05-16T10:10:02.574761Z","shell.execute_reply.started":"2024-05-16T10:09:56.377009Z"},"trusted":true},"outputs":[],"source":["import tensorflow as tf\n","\n","train_dataset = tf.data.Dataset.from_tensor_slices((X_train, y_train))\n","val_dataset = tf.data.Dataset.from_tensor_slices((X_val, y_val))\n","\n","# Shuffle and batch the datasets\n","batch_size = 32\n","\n","train_dataset = train_dataset.shuffle(buffer_size=1024).batch(batch_size).prefetch(buffer_size=tf.data.AUTOTUNE)\n","val_dataset = val_dataset.batch(batch_size).prefetch(buffer_size=tf.data.AUTOTUNE)\n"]},{"cell_type":"markdown","metadata":{},"source":["# **Load the Pre-trained MobileNetV2 Model and Modify It**"]},{"cell_type":"code","execution_count":10,"metadata":{"execution":{"iopub.execute_input":"2024-05-16T10:10:05.839213Z","iopub.status.busy":"2024-05-16T10:10:05.838400Z","iopub.status.idle":"2024-05-16T10:10:07.123586Z","shell.execute_reply":"2024-05-16T10:10:07.122498Z","shell.execute_reply.started":"2024-05-16T10:10:05.839175Z"},"trusted":true},"outputs":[],"source":["from tensorflow.keras.applications import MobileNetV2\n","from tensorflow.keras.layers import Dense, GlobalAveragePooling2D\n","from tensorflow.keras.models import Model\n","\n","base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n","\n","x = base_model.output\n","x = GlobalAveragePooling2D()(x)\n","x = Dense(1024, activation='relu')(x)\n","predictions = Dense(num_classes, activation='softmax')(x)\n","\n","model = Model(inputs=base_model.input, outputs=predictions)\n"]},{"cell_type":"markdown","metadata":{},"source":["# **Compile the Model**"]},{"cell_type":"code","execution_count":12,"metadata":{"execution":{"iopub.execute_input":"2024-05-16T10:10:19.299046Z","iopub.status.busy":"2024-05-16T10:10:19.298021Z","iopub.status.idle":"2024-05-16T10:10:19.310739Z","shell.execute_reply":"2024-05-16T10:10:19.309732Z","shell.execute_reply.started":"2024-05-16T10:10:19.299009Z"},"trusted":true},"outputs":[],"source":["for layer in base_model.layers:\n","    layer.trainable = False\n","\n","model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n"]},{"cell_type":"markdown","metadata":{},"source":["# **Train the Model**"]},{"cell_type":"code","execution_count":13,"metadata":{"execution":{"iopub.execute_input":"2024-05-16T10:10:22.242080Z","iopub.status.busy":"2024-05-16T10:10:22.241662Z","iopub.status.idle":"2024-05-16T10:11:38.012491Z","shell.execute_reply":"2024-05-16T10:11:38.011475Z","shell.execute_reply.started":"2024-05-16T10:10:22.242048Z"},"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/10\n","\u001b[1m  7/397\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m8s\u001b[0m 21ms/step - accuracy: 0.3004 - loss: 2.2576   "]},{"name":"stderr","output_type":"stream","text":["WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n","I0000 00:00:1715854236.144386     233 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[1m397/397\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 35ms/step - accuracy: 0.5859 - loss: 1.1250 - val_accuracy: 0.6591 - val_loss: 0.8342\n","Epoch 2/10\n","\u001b[1m  1/397\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m28:40\u001b[0m 4s/step - accuracy: 1.0000 - loss: 0.5064"]},{"name":"stderr","output_type":"stream","text":["/opt/conda/lib/python3.10/contextlib.py:153: UserWarning: Your input ran out of data; interrupting training. Make sure that your dataset or generator can generate at least `steps_per_epoch * epochs` batches. You may need to use the `.repeat()` function when building your dataset.\n","  self.gen.throw(typ, value, traceback)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[1m397/397\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.5064 - val_accuracy: 0.8000 - val_loss: 0.4705\n","Epoch 3/10\n","\u001b[1m397/397\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 25ms/step - accuracy: 0.6813 - loss: 0.7956 - val_accuracy: 0.6749 - val_loss: 0.7956\n","Epoch 4/10\n","\u001b[1m397/397\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 67us/step - accuracy: 0.5714 - loss: 1.5777 - val_accuracy: 0.8000 - val_loss: 0.4271\n","Epoch 5/10\n","\u001b[1m397/397\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 25ms/step - accuracy: 0.7000 - loss: 0.7360 - val_accuracy: 0.6884 - val_loss: 0.7569\n","Epoch 6/10\n","\u001b[1m397/397\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 68us/step - accuracy: 0.7143 - loss: 0.6723 - val_accuracy: 1.0000 - val_loss: 0.3910\n","Epoch 7/10\n","\u001b[1m397/397\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 25ms/step - accuracy: 0.7134 - loss: 0.6977 - val_accuracy: 0.6992 - val_loss: 0.7413\n","Epoch 8/10\n","\u001b[1m397/397\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 68us/step - accuracy: 0.5714 - loss: 0.8367 - val_accuracy: 1.0000 - val_loss: 0.3047\n","Epoch 9/10\n","\u001b[1m397/397\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 25ms/step - accuracy: 0.7229 - loss: 0.6755 - val_accuracy: 0.6976 - val_loss: 0.7417\n","Epoch 10/10\n","\u001b[1m397/397\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 68us/step - accuracy: 0.7143 - loss: 0.4860 - val_accuracy: 0.8000 - val_loss: 0.3433\n"]},{"data":{"text/plain":["<keras.src.callbacks.history.History at 0x78af01479fc0>"]},"execution_count":13,"metadata":{},"output_type":"execute_result"}],"source":["model.fit(\n","    train_dataset,\n","    validation_data=val_dataset,\n","    epochs=10,\n","    steps_per_epoch=len(X_train) // batch_size,\n","    validation_steps=len(X_val) // batch_size\n",")\n"]},{"cell_type":"markdown","metadata":{},"source":["# **Fine-tune the Model**"]},{"cell_type":"code","execution_count":14,"metadata":{"execution":{"iopub.execute_input":"2024-05-16T10:11:51.719485Z","iopub.status.busy":"2024-05-16T10:11:51.718509Z","iopub.status.idle":"2024-05-16T10:13:15.991487Z","shell.execute_reply":"2024-05-16T10:13:15.990406Z","shell.execute_reply.started":"2024-05-16T10:11:51.719449Z"},"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/10\n","\u001b[1m397/397\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 37ms/step - accuracy: 0.4254 - loss: 5.4235 - val_accuracy: 0.5461 - val_loss: 1.9784\n","Epoch 2/10\n","\u001b[1m397/397\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 5ms/step - accuracy: 1.0000 - loss: 0.4895 - val_accuracy: 0.7000 - val_loss: 1.8652\n","Epoch 3/10\n","\u001b[1m397/397\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 30ms/step - accuracy: 0.6336 - loss: 0.9121 - val_accuracy: 0.5956 - val_loss: 1.3982\n","Epoch 4/10\n","\u001b[1m397/397\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 68us/step - accuracy: 0.8571 - loss: 0.5775 - val_accuracy: 0.8000 - val_loss: 1.2784\n","Epoch 5/10\n","\u001b[1m397/397\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 30ms/step - accuracy: 0.6749 - loss: 0.8093 - val_accuracy: 0.6364 - val_loss: 1.0649\n","Epoch 6/10\n","\u001b[1m397/397\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 70us/step - accuracy: 0.8571 - loss: 0.3434 - val_accuracy: 0.8000 - val_loss: 0.8327\n","Epoch 7/10\n","\u001b[1m397/397\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 30ms/step - accuracy: 0.6974 - loss: 0.7596 - val_accuracy: 0.6783 - val_loss: 0.8485\n","Epoch 8/10\n","\u001b[1m397/397\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 69us/step - accuracy: 0.7143 - loss: 0.4149 - val_accuracy: 0.6000 - val_loss: 0.5867\n","Epoch 9/10\n","\u001b[1m397/397\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 30ms/step - accuracy: 0.7062 - loss: 0.7164 - val_accuracy: 0.6834 - val_loss: 0.8026\n","Epoch 10/10\n","\u001b[1m397/397\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 73us/step - accuracy: 0.8571 - loss: 0.6569 - val_accuracy: 0.7000 - val_loss: 0.5718\n"]},{"data":{"text/plain":["<keras.src.callbacks.history.History at 0x78af014235b0>"]},"execution_count":14,"metadata":{},"output_type":"execute_result"}],"source":["for layer in base_model.layers[-20:]:\n","    layer.trainable = True\n","\n","model.compile(optimizer=tf.keras.optimizers.Adam(1e-5), loss='categorical_crossentropy', metrics=['accuracy'])\n","\n","model.fit(\n","    train_dataset,\n","    validation_data=val_dataset,\n","    epochs=10,\n","    steps_per_epoch=len(X_train) // batch_size,\n","    validation_steps=len(X_val) // batch_size\n",")\n"]},{"cell_type":"markdown","metadata":{},"source":["# Creating the folder to save the model"]},{"cell_type":"code","execution_count":15,"metadata":{"execution":{"iopub.execute_input":"2024-05-16T10:13:30.675163Z","iopub.status.busy":"2024-05-16T10:13:30.673995Z","iopub.status.idle":"2024-05-16T10:13:30.681999Z","shell.execute_reply":"2024-05-16T10:13:30.681035Z","shell.execute_reply.started":"2024-05-16T10:13:30.675112Z"},"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["New directory created: /kaggle/working/skin_model\n"]}],"source":["import os\n","\n","# Define the name of the directory you want to create\n","new_directory_name = \"skin_model\"\n","\n","# Define the path of the new directory within the Kaggle output directory\n","new_directory_path = \"/kaggle/working/\" + new_directory_name\n","\n","# Create the new directory\n","os.makedirs(new_directory_path, exist_ok=True)\n","\n","# Print a message indicating that the directory has been created\n","print(\"New directory created:\", new_directory_path)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2024-05-16T12:33:33.251276Z","iopub.status.busy":"2024-05-16T12:33:33.250875Z","iopub.status.idle":"2024-05-16T12:33:33.642477Z","shell.execute_reply":"2024-05-16T12:33:33.641012Z","shell.execute_reply.started":"2024-05-16T12:33:33.251243Z"},"trusted":true},"outputs":[],"source":["# Save the model in HDF5 format.\n","model.save('/kaggle/working/skin_model/V2model.h5')\n"]},{"cell_type":"markdown","metadata":{},"source":["# **Downloading the Model**"]},{"cell_type":"code","execution_count":83,"metadata":{"execution":{"iopub.execute_input":"2024-05-16T12:11:18.222688Z","iopub.status.busy":"2024-05-16T12:11:18.221963Z","iopub.status.idle":"2024-05-16T12:11:22.551914Z","shell.execute_reply":"2024-05-16T12:11:22.550652Z","shell.execute_reply.started":"2024-05-16T12:11:18.222654Z"},"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["updating: kaggle/working/skin_model/ (stored 0%)\n","updating: kaggle/working/skin_model/V2model.h5 (deflated 11%)\n","file.zip  skin_model\n"]},{"data":{"text/html":["<a href='file.zip' target='_blank'>file.zip</a><br>"],"text/plain":["/kaggle/working/file.zip"]},"execution_count":83,"metadata":{},"output_type":"execute_result"}],"source":["!zip -r file.zip /kaggle/working/skin_model\n","!ls\n","from IPython.display import FileLink\n","FileLink(r'file.zip')"]},{"cell_type":"markdown","metadata":{},"source":[]},{"cell_type":"markdown","metadata":{},"source":["# **Importing Test Dataset**"]},{"cell_type":"code","execution_count":59,"metadata":{"execution":{"iopub.execute_input":"2024-05-16T11:14:04.176391Z","iopub.status.busy":"2024-05-16T11:14:04.175593Z","iopub.status.idle":"2024-05-16T11:14:05.171048Z","shell.execute_reply":"2024-05-16T11:14:05.170168Z","shell.execute_reply.started":"2024-05-16T11:14:04.176357Z"},"trusted":true},"outputs":[],"source":["import numpy as np\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n","\n","# Load the test data\n","feats_test = np.load('/kaggle/input/test-class/feats_test.npy')\n","labels_test = np.load('/kaggle/input/test-lable/labels_test.npy')\n","\n","# Load your model (assuming it has been previously saved)\n","loaded_model = tf.keras.models.load_model('/kaggle/working/skin_model/V2model.h5')\n"]},{"cell_type":"code","execution_count":60,"metadata":{"execution":{"iopub.execute_input":"2024-05-16T11:14:08.321751Z","iopub.status.busy":"2024-05-16T11:14:08.321323Z","iopub.status.idle":"2024-05-16T11:14:08.327097Z","shell.execute_reply":"2024-05-16T11:14:08.326069Z","shell.execute_reply.started":"2024-05-16T11:14:08.321719Z"},"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["(1500, 224, 224, 3)\n","(1500,)\n"]}],"source":["# Check shapes of the test features and labels\n","print(feats_test.shape)\n","print(labels_test.shape)\n"]},{"cell_type":"code","execution_count":61,"metadata":{"execution":{"iopub.execute_input":"2024-05-16T11:14:13.523233Z","iopub.status.busy":"2024-05-16T11:14:13.522660Z","iopub.status.idle":"2024-05-16T11:14:20.976661Z","shell.execute_reply":"2024-05-16T11:14:20.975702Z","shell.execute_reply.started":"2024-05-16T11:14:13.523196Z"},"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 82ms/step\n"]}],"source":["# Make predictions\n","predictions = loaded_model.predict(feats_test)\n","predicted_classes = np.argmax(predictions, axis=1)\n","\n","# Convert one-hot encoded labels back to integer labels\n","true_classes = labels_test  # Use the original integer labels\n"]},{"cell_type":"markdown","metadata":{},"source":["# **Plotting confusion matrix**"]},{"cell_type":"code","execution_count":62,"metadata":{"execution":{"iopub.execute_input":"2024-05-16T11:14:22.797032Z","iopub.status.busy":"2024-05-16T11:14:22.796250Z","iopub.status.idle":"2024-05-16T11:14:23.243432Z","shell.execute_reply":"2024-05-16T11:14:23.242378Z","shell.execute_reply.started":"2024-05-16T11:14:22.796998Z"},"trusted":true},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 1000x700 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Generate the confusion matrix\n","cm = confusion_matrix(true_classes, predicted_classes)\n","\n","# Plot the confusion matrix\n","plt.figure(figsize=(10, 7))\n","sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=range(num_classes), yticklabels=range(num_classes))\n","plt.xlabel('Predicted Labels')\n","plt.ylabel('True Labels')\n","plt.title('Confusion Matrix')\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2024-05-16T11:26:50.691320Z","iopub.status.busy":"2024-05-16T11:26:50.690815Z","iopub.status.idle":"2024-05-16T11:27:08.205265Z","shell.execute_reply":"2024-05-16T11:27:08.204007Z","shell.execute_reply.started":"2024-05-16T11:26:50.691283Z"},"trusted":true},"outputs":[],"source":["# pip install tensorflow requests pillow\n"]},{"cell_type":"markdown","metadata":{},"source":["# **Predicting class name with probabilities for all classes**"]},{"cell_type":"code","execution_count":2,"metadata":{"execution":{"iopub.execute_input":"2024-05-16T12:37:53.355324Z","iopub.status.busy":"2024-05-16T12:37:53.354879Z","iopub.status.idle":"2024-05-16T12:38:09.463259Z","shell.execute_reply":"2024-05-16T12:38:09.462212Z","shell.execute_reply.started":"2024-05-16T12:37:53.355288Z"},"trusted":true},"outputs":[{"name":"stderr","output_type":"stream","text":["2024-05-16 12:37:55.209973: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n","2024-05-16 12:37:55.210090: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n","2024-05-16 12:37:55.344296: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"]}],"source":["import tensorflow as tf\n","# loaded_model = tf.keras.models.load_model('/kaggle/working/skin_model/V2model.h5')\n","loaded_model = tf.keras.models.load_model('/kaggle/input/gptskin5c/tensorflow2/gptskin5c/1/V2model.h5')\n"]},{"cell_type":"code","execution_count":3,"metadata":{"execution":{"iopub.execute_input":"2024-05-16T12:38:12.346609Z","iopub.status.busy":"2024-05-16T12:38:12.345515Z","iopub.status.idle":"2024-05-16T12:38:12.354675Z","shell.execute_reply":"2024-05-16T12:38:12.353498Z","shell.execute_reply.started":"2024-05-16T12:38:12.346572Z"},"trusted":true},"outputs":[],"source":["#Function to Download and Preprocess Image\n","import requests\n","from PIL import Image\n","from io import BytesIO\n","import numpy as np\n","\n","def download_and_preprocess_image(url, target_size=(224, 224)):\n","    response = requests.get(url)\n","    img = Image.open(BytesIO(response.content))\n","    img = img.resize(target_size)\n","    img_array = np.array(img)\n","    \n","    # Check if the image has an alpha channel (4th channel), and if so, remove it\n","    if img_array.shape[-1] == 4:  \n","        img_array = img_array[..., :3]  \n","    \n","    img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension\n","    img_array = tf.keras.applications.mobilenet_v2.preprocess_input(img_array)  # Preprocess the image\n","    return img_array\n"]},{"cell_type":"code","execution_count":5,"metadata":{"execution":{"iopub.execute_input":"2024-05-16T12:38:20.089456Z","iopub.status.busy":"2024-05-16T12:38:20.089042Z","iopub.status.idle":"2024-05-16T12:38:20.095251Z","shell.execute_reply":"2024-05-16T12:38:20.094004Z","shell.execute_reply.started":"2024-05-16T12:38:20.089426Z"},"trusted":true},"outputs":[],"source":["# Define Class Names\n","class_names = ['Basal_cell_carcinoma', 'Melanoma', 'Nevus', 'benign_keratosis', 'no_cancer']  # Update with your actual class names\n"]},{"cell_type":"code","execution_count":6,"metadata":{"execution":{"iopub.execute_input":"2024-05-16T12:38:22.095122Z","iopub.status.busy":"2024-05-16T12:38:22.094754Z","iopub.status.idle":"2024-05-16T12:38:22.102548Z","shell.execute_reply":"2024-05-16T12:38:22.101245Z","shell.execute_reply.started":"2024-05-16T12:38:22.095094Z"},"trusted":true},"outputs":[],"source":["#Function to Predict Class with Probabilities\n","def predict_image_class(url):\n","    img_array = download_and_preprocess_image(url)\n","    predictions = loaded_model.predict(img_array)\n","    \n","    predicted_class_index = np.argmax(predictions, axis=1)[0]\n","    predicted_class_name = class_names[predicted_class_index]\n","    \n","    # Convert predictions to percentages\n","    prediction_percentages = predictions[0] * 100\n","    \n","    # Print out the prediction percentages for each class\n","    for i, class_name in enumerate(class_names):\n","        print(f\"{class_name}: {prediction_percentages[i]:.2f}%\")\n","    \n","    return predicted_class_name, prediction_percentages\n","\n"]},{"cell_type":"markdown","metadata":{},"source":["# **Usage**"]},{"cell_type":"code","execution_count":11,"metadata":{"execution":{"iopub.execute_input":"2024-05-16T12:41:06.251406Z","iopub.status.busy":"2024-05-16T12:41:06.250519Z","iopub.status.idle":"2024-05-16T12:41:08.751529Z","shell.execute_reply":"2024-05-16T12:41:08.750287Z","shell.execute_reply.started":"2024-05-16T12:41:06.251359Z"},"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["Please enter the URL of the image:  https://www.cancer.org/content/dam/cancer-org/images/galleries/skin-cancer-images/non-pre-cancer-normal-mole-01-restricted.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n","Basal_cell_carcinoma: 0.00%\n","Melanoma: 0.00%\n","Nevus: 0.00%\n","benign_keratosis: 0.00%\n","no_cancer: 100.00%\n","Predicted class: no_cancer\n"]}],"source":["# Example usage\n","image_url = input(\"Please enter the URL of the image: \")\n","predicted_class_name, prediction_percentages = predict_image_class(image_url)\n","print(f'Predicted class: {predicted_class_name}')"]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"datasetId":5019131,"sourceId":8428684,"sourceType":"datasetVersion"},{"datasetId":5019245,"sourceId":8428821,"sourceType":"datasetVersion"}],"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"}},"nbformat":4,"nbformat_minor":4}
